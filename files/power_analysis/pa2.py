#!usr/bin/python
##Cyberguru
#DPA ATTACk
import numpy as np
# from pwn import *
# from Crypto.Util.number import *
import os
import json
import sys
import pandas as pd
from visplot.visplot import plot
import matplotlib.pyplot as plt

Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

# with open('trace2.json', 'r') as f:
#     ff = f.read()
#     output = json.loads(ff)

output = {}
for i in range(1, 4):
    ind = f"{i}".zfill(2)
    with open(f"trace{i}.json", 'r') as f:
        plaintext = f.readline().split(':')[1].strip()
        power_trace = list(map(int, f.readline().split(':')[1].strip().strip("[").strip("]").split(',')))
        output.update(json.loads(f.read()))

traces = list(output.values())

leakage_point = [i for i in range(326, 349)]

conrr = list(output.items())[:100]
print(len(conrr))
targetbit = 0
targetbyte = 0
len_t = 2666
foundkey  = []
flag = ''
threshold  = 5 # 4
hw = [bin(i).count("1") for i in range(0, 256)]
for bnum in range(16):
    avg_point = leakage_point[bnum]
    mean_diffs = np.zeros(256)
    maxx = 0
    arr = {}
    for key in range(0, 256):
        m1 = []
        m0 = []
        for tnum in range(len(conrr)):
            # pt = hex(bytes_to_long(os.urandom(16)))[2:]
            # conn = remote("saturn.picoctf.net", sys.argv[1])
            # conn.sendlineafter("hex: ", pt)
            # out = conn.recvuntil("]")
            # conn.close()len()
            # traces = re.findall('\d+', out.decode())
            # traces = list(map(lambda x: int(x), traces))
            pt = conrr[tnum][0]
            trace = conrr[tnum][1][avg_point]
            # trace = np.asarray(trace)
            hyp = Sbox[int(pt[bnum*2:bnum*2 + 2], 16) ^ key]
            hyp = hw[hyp]
            #if target bit 1 or or 07
            if (hyp < threshold):
                m1.append(trace)
            else:
                m0.append(trace)
            # print(num1, num0)
        m1_avg = np.asarray(m1).mean(axis=0)
        m0_avg = np.asarray(m0).mean(axis=0)
        mean_diffs[key] = np.max(abs(m1_avg - m0_avg))
        # find the differences btw two means
        if mean_diffs[key] > maxx:
            maxx = mean_diffs[key]
            best_key = key
    flag += hex(best_key)[2:].zfill(2)
    for i in range(10):
        cont = sorted(mean_diffs,reverse=True)[i]
        print("KEY: ", hex(list(mean_diffs).index(cont))[2:], "Vaule: ", cont)
    print(flag, "found somoething !!! ______+++++++++!_____%2x"% best_key)


# v = plot(tra, dontrun=True)
# v.add_horizontal_ruler(5.2)

# v.add_horizontal_band(1.0, -1.0)
# v.add_vertical_ruler(109)
# v.run()
# fig, ax = plt.subplots(2,figsize=(50, 20))
# # # # i = 0
# for trace in traces:

#     ax[0].plot(trace)

# # # for trace2 in traces2:
# # #     ax[1].plot(trace2[:501])

# ax[0].set_xlabel("time")
# ax[0].set_title("non_nps")

# # # ax[1].set_xlabel("time")
# # # ax[1].set_title("nops")

# plt.show()
